openapi: 3.0.3
info:
  title: NeoScan Master API
  description: |
    NeoScan Master 服务器API接口文档 v2.0
    
    ## 版本更新说明
    
    **版本**: v2.0  
    **更新日期**: 2025-09-01  
    **主要变更**:
    - 重构用户服务架构：UserService功能合并到UserRepository
    - 优化数据库表结构：统一使用自增主键，移除复合主键
    - 增强测试覆盖：完整的单元测试和集成测试
    - 改进权限管理：优化角色权限关联表结构
    - 提升性能：数据库索引优化和查询性能提升
    
    ## 认证说明
    
    大部分API需要JWT Bearer Token认证，请在请求头中包含：
    ```
    Authorization: Bearer <access_token>
    ```
  version: 2.0.0
  contact:
    name: NeoScan Team
    email: support@neoscan.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8123
    description: 本地开发服务器
  - url: https://api.neoscan.com
    description: 生产环境服务器

security:
  - bearerAuth: []

paths:
  # 健康检查接口
  /api/health:
    get:
      tags:
        - 健康检查
      summary: 健康检查
      description: 检查服务器健康状态
      security: []
      responses:
        '200':
          description: 服务器健康
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-09-01T12:00:00Z"
                  version:
                    type: string
                    example: "v2.0"
                  uptime:
                    type: string
                    example: "24h30m15s"

  /api/ready:
    get:
      tags:
        - 健康检查
      summary: 就绪检查
      description: 检查服务器就绪状态（数据库、Redis连接）
      security: []
      responses:
        '200':
          description: 服务器就绪
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ready
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-09-01T12:00:00Z"
                  services:
                    type: object
                    properties:
                      database:
                        type: string
                        example: connected
                      redis:
                        type: string
                        example: connected

  /api/live:
    get:
      tags:
        - 健康检查
      summary: 存活检查
      description: 检查服务器存活状态
      security: []
      responses:
        '200':
          description: 服务器存活
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: alive
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-09-01T12:00:00Z"

  # 认证接口
  /api/v1/auth/login:
    post:
      tags:
        - 认证
      summary: 用户登录
      description: 用户登录获取JWT令牌
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: 用户名或邮箱
                  example: admin
                password:
                  type: string
                  description: 密码
                  example: admin123
                remember_me:
                  type: boolean
                  description: 记住我
                  default: false
            examples:
              admin_login:
                summary: 管理员登录
                value:
                  username: "admin"
                  password: "admin123"
                  remember_me: false
              email_login:
                summary: 邮箱登录
                value:
                  username: "admin@example.com"
                  password: "admin123"
      responses:
        '200':
          description: 登录成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 用户名或密码错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: 无效凭据
                  value:
                    success: false
                    error: "INVALID_CREDENTIALS"
                    message: "用户名或密码错误"
        '403':
          description: 用户已被禁用
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                user_inactive:
                  summary: 用户被禁用
                  value:
                    success: false
                    error: "USER_INACTIVE"
                    message: "用户已被禁用"
        '429':
          description: 请求频率限制
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - 认证
      summary: 获取登录表单
      description: 获取登录表单页面（HTML）
      security: []
      responses:
        '200':
          description: 登录表单页面
          content:
            text/html:
              schema:
                type: string

  /api/v1/auth/refresh:
    post:
      tags:
        - 认证
      summary: 刷新令牌
      description: 使用刷新令牌获取新的访问令牌
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  description: 刷新令牌
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: 刷新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: 刷新令牌无效或过期
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/refresh-header:
    post:
      tags:
        - 认证
      summary: 从请求头刷新令牌
      description: 从Authorization头刷新令牌
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 刷新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: 令牌无效
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/check-expiry:
    post:
      tags:
        - 认证
      summary: 检查令牌过期时间
      description: 检查令牌过期时间
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: JWT令牌
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: 检查成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      expires_at:
                        type: string
                        format: date-time
                        example: "2025-09-02T12:00:00Z"
                      expires_in:
                        type: integer
                        description: 剩余秒数
                        example: 86400
                      is_expired:
                        type: boolean
                        example: false

  /api/v1/auth/logout:
    post:
      tags:
        - 认证
      summary: 用户登出
      description: 用户登出，使当前令牌失效
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 登出成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/logout-all:
    post:
      tags:
        - 认证
      summary: 用户全部登出
      description: 用户全部设备登出，使所有令牌失效
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 全部登出成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      message:
                        example: "已从所有设备登出"
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # 用户信息接口
  /api/v1/user/profile:
    get:
      tags:
        - 用户信息
      summary: 获取当前用户信息
      description: 获取当前登录用户的详细信息
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/UserProfile'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - 用户信息
      summary: 更新用户信息
      description: 更新当前用户的基本信息
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
                  description: 昵称
                  example: "新昵称"
                email:
                  type: string
                  format: email
                  description: 邮箱
                  example: "new@example.com"
                phone:
                  type: string
                  description: 手机号
                  example: "13800138000"
                avatar:
                  type: string
                  description: 头像URL
                  example: "https://example.com/avatar.jpg"
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: 邮箱已存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/user/change-password:
    post:
      tags:
        - 用户信息
      summary: 修改用户密码
      description: 修改当前用户密码
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - old_password
                - new_password
                - confirm_password
              properties:
                old_password:
                  type: string
                  description: 旧密码
                  example: "oldpass123"
                new_password:
                  type: string
                  description: 新密码
                  example: "newpass123"
                confirm_password:
                  type: string
                  description: 确认新密码
                  example: "newpass123"
      responses:
        '200':
          description: 密码修改成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "密码修改成功"
                  data:
                    type: object
                    properties:
                      password_version:
                        type: integer
                        description: 密码版本号
                        example: 2
                      updated_at:
                        type: string
                        format: date-time
                        example: "2025-09-01T12:00:00Z"
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                password_mismatch:
                  summary: 密码不匹配
                  value:
                    success: false
                    error: "PASSWORD_MISMATCH"
                    message: "新密码与确认密码不匹配"
                password_weak:
                  summary: 密码强度不足
                  value:
                    success: false
                    error: "PASSWORD_WEAK"
                    message: "密码强度不足"
        '401':
          description: 旧密码错误或未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/user/permissions:
    get:
      tags:
        - 用户信息
      summary: 获取用户权限
      description: 获取当前用户的权限列表
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      permissions:
                        type: array
                        items:
                          $ref: '#/components/schemas/Permission'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/user/roles:
    get:
      tags:
        - 用户信息
      summary: 获取用户角色
      description: 获取当前用户的角色列表
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      roles:
                        type: array
                        items:
                          $ref: '#/components/schemas/Role'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # 管理员接口 - 用户管理
  /api/v1/admin/users/list:
    get:
      tags:
        - 管理员-用户管理
      summary: 获取用户列表
      description: 获取所有用户列表（支持分页和搜索）
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: 页码
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: 每页数量
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: search
          in: query
          description: 搜索关键词（支持用户名、邮箱、昵称）
          schema:
            type: string
        - name: status
          in: query
          description: 用户状态筛选
          schema:
            type: string
            enum: [active, inactive]
        - name: role
          in: query
          description: 角色筛选
          schema:
            type: string
        - name: sort
          in: query
          description: 排序字段
          schema:
            type: string
            enum: [id, username, created_at]
            default: id
        - name: order
          in: query
          description: 排序方向
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserListItem'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 权限不足
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/admin/users/create:
    post:
      tags:
        - 管理员-用户管理
      summary: 创建用户
      description: 创建新用户
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  description: 用户名
                  example: "newuser"
                email:
                  type: string
                  format: email
                  description: 邮箱
                  example: "user@example.com"
                password:
                  type: string
                  description: 密码
                  example: "userpass123"
                nickname:
                  type: string
                  description: 昵称
                  example: "新用户"
                phone:
                  type: string
                  description: 手机号
                  example: "13800138000"
                remark:
                  type: string
                  description: 备注
                  example: "测试用户"
                is_active:
                  type: boolean
                  description: 是否激活
                  default: true
                roles:
                  type: array
                  items:
                    type: string
                  description: 角色列表
                  example: ["user"]
      responses:
        '200':
          description: 创建成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "用户创建成功"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      username:
                        type: string
                        example: "newuser"
                      email:
                        type: string
                        example: "user@example.com"
                      created_at:
                        type: string
                        format: date-time
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 权限不足
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: 用户名或邮箱已存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                username_exists:
                  summary: 用户名已存在
                  value:
                    success: false
                    error: "USERNAME_EXISTS"
                    message: "用户名已存在"
                email_exists:
                  summary: 邮箱已存在
                  value:
                    success: false
                    error: "EMAIL_EXISTS"
                    message: "邮箱已存在"

  /api/v1/admin/users/{id}:
    get:
      tags:
        - 管理员-用户管理
      summary: 获取用户详情
      description: 获取指定用户的详细信息
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: 用户ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/UserProfile'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 权限不足
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 用户不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - 管理员-用户管理
      summary: 更新用户信息
      description: 更新指定用户的信息
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: 用户ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: 邮箱
                  example: "newemail@example.com"
                nickname:
                  type: string
                  description: 昵称
                  example: "新昵称"
                phone:
                  type: string
                  description: 手机号
                  example: "13800138001"
                remark:
                  type: string
                  description: 备注
                  example: "更新的备注"
                is_active:
                  type: boolean
                  description: 是否激活
                  example: true
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 权限不足
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 用户不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: 邮箱已存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - 管理员-用户管理
      summary: 删除用户
      description: 删除指定用户（软删除）
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: 用户ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 权限不足
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 用户不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/admin/users/{id}/reset-password:
    post:
      tags:
        - 管理员-用户管理
      summary: 重置用户密码
      description: 重置指定用户的密码
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: 用户ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - new_password
              properties:
                new_password:
                  type: string
                  description: 新密码
                  example: "newpass123"
      responses:
        '200':
          description: 重置成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 权限不足
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 用户不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/admin/users/{id}/roles:
    put:
      tags:
        - 管理员-用户管理
      summary: 管理用户角色
      description: 更新用户的角色分配
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: 用户ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roles
              properties:
                roles:
                  type: array
                  items:
                    type: string
                  description: 角色名称列表
                  example: ["user", "editor"]
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 权限不足
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 用户不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # 管理员接口 - 角色管理
  /api/v1/admin/roles/list:
    get:
      tags:
        - 管理员-角色管理
      summary: 获取角色列表
      description: 获取所有角色列表
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      roles:
                        type: array
                        items:
                          $ref: '#/components/schemas/Role'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 权限不足
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/admin/roles/create:
    post:
      tags:
        - 管理员-角色管理
      summary: 创建角色
      description: 创建新角色
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - display_name
              properties:
                name:
                  type: string
                  description: 角色名称（英文）
                  example: "editor"
                display_name:
                  type: string
                  description: 角色显示名称
                  example: "编辑员"
                description:
                  type: string
                  description: 角色描述
                  example: "内容编辑角色"
                permissions:
                  type: array
                  items:
                    type: string
                  description: 权限列表
                  example: ["content:read", "content:write"]
      responses:
        '200':
          description: 创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 权限不足
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: 角色已存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # 管理员接口 - 权限管理
  /api/v1/admin/permissions/list:
    get:
      tags:
        - 管理员-权限管理
      summary: 获取权限列表
      description: 获取所有权限列表
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      permissions:
                        type: array
                        items:
                          $ref: '#/components/schemas/Permission'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 权限不足
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # 系统统计接口
  /api/v1/admin/dashboard/overview:
    get:
      tags:
        - 系统统计
      summary: 系统概览
      description: 获取系统概览统计信息
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      users:
                        type: object
                        properties:
                          total:
                            type: integer
                            description: 总用户数
                            example: 100
                          active:
                            type: integer
                            description: 活跃用户数
                            example: 95
                          new_today:
                            type: integer
                            description: 今日新增用户
                            example: 5
                      system:
                        type: object
                        properties:
                          uptime:
                            type: string
                            description: 系统运行时间
                            example: "24h30m15s"
                          version:
                            type: string
                            description: 系统版本
                            example: "v2.0"
                          database_status:
                            type: string
                            description: 数据库状态
                            example: "healthy"
                          redis_status:
                            type: string
                            description: Redis状态
                            example: "healthy"
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 权限不足
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT Bearer Token认证
        
        请在请求头中包含：
        ```
        Authorization: Bearer <access_token>
        ```

  schemas:
    # 基础响应模型
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "操作成功"
        data:
          type: object
          nullable: true
        timestamp:
          type: string
          format: date-time
          example: "2025-09-01T12:00:00Z"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: 错误代码
          example: "UNAUTHORIZED"
        message:
          type: string
          description: 错误描述
          example: "未授权访问"
        timestamp:
          type: string
          format: date-time
          example: "2025-09-01T12:00:00Z"
        details:
          type: string
          description: 详细错误信息（开发模式）
          nullable: true

    # 分页模型
    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: 当前页码
          example: 1
        limit:
          type: integer
          description: 每页数量
          example: 10
        total:
          type: integer
          description: 总记录数
          example: 100
        pages:
          type: integer
          description: 总页数
          example: 10

    # 用户相关模型
    User:
      type: object
      properties:
        id:
          type: integer
          description: 用户ID
          example: 1
        username:
          type: string
          description: 用户名
          example: "admin"
        email:
          type: string
          format: email
          description: 邮箱
          example: "admin@example.com"
        created_at:
          type: string
          format: date-time
          description: 创建时间
          example: "2025-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: 更新时间
          example: "2025-09-01T12:00:00Z"
        is_active:
          type: boolean
          description: 是否激活
          example: true
        roles:
          type: array
          items:
            type: string
          description: 角色列表
          example: ["admin"]
        permissions:
          type: array
          items:
            type: string
          description: 权限列表
          example: ["user:read", "user:write", "admin:all"]

    UserProfile:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            nickname:
              type: string
              description: 昵称
              example: "管理员"
            avatar:
              type: string
              description: 头像URL
              example: ""
            phone:
              type: string
              description: 手机号
              example: ""
            remark:
              type: string
              description: 备注
              example: "系统管理员"
            password_version:
              type: integer
              description: 密码版本
              example: 1
            last_login_at:
              type: string
              format: date-time
              description: 最后登录时间
              example: "2025-09-01T12:00:00Z"
            roles:
              type: array
              items:
                $ref: '#/components/schemas/Role'
              description: 角色详细信息
            permissions:
              type: array
              items:
                $ref: '#/components/schemas/Permission'
              description: 权限详细信息

    UserListItem:
      type: object
      properties:
        id:
          type: integer
          description: 用户ID
          example: 1
        username:
          type: string
          description: 用户名
          example: "admin"
        email:
          type: string
          format: email
          description: 邮箱
          example: "admin@example.com"
        nickname:
          type: string
          description: 昵称
          example: "管理员"
        is_active:
          type: boolean
          description: 是否激活
          example: true
        last_login_at:
          type: string
          format: date-time
          description: 最后登录时间
          example: "2025-09-01T12:00:00Z"
        created_at:
          type: string
          format: date-time
          description: 创建时间
          example: "2025-01-01T00:00:00Z"
        roles:
          type: array
          items:
            type: string
          description: 角色名称列表
          example: ["admin"]

    # 角色模型
    Role:
      type: object
      properties:
        id:
          type: integer
          description: 角色ID
          example: 1
        name:
          type: string
          description: 角色名称
          example: "admin"
        display_name:
          type: string
          description: 角色显示名称
          example: "管理员"
        description:
          type: string
          description: 角色描述
          example: "系统管理员角色"
        created_at:
          type: string
          format: date-time
          description: 创建时间
          example: "2025-01-01T00:00:00Z"

    # 权限模型
    Permission:
      type: object
      properties:
        id:
          type: integer
          description: 权限ID
          example: 1
        name:
          type: string
          description: 权限名称
          example: "user:read"
        display_name:
          type: string
          description: 权限显示名称
          example: "用户查看"
        description:
          type: string
          description: 权限描述
          example: "查看用户信息的权限"
        resource:
          type: string
          description: 资源类型
          example: "user"
        action:
          type: string
          description: 操作类型
          example: "read"
        status:
          type: string
          description: 权限状态
          enum: [active, inactive]
          example: "active"

    # 认证相关模型
    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "登录成功"
        data:
          type: object
          properties:
            access_token:
              type: string
              description: 访问令牌
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            refresh_token:
              type: string
              description: 刷新令牌
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            token_type:
              type: string
              description: 令牌类型
              example: "Bearer"
            expires_in:
              type: integer
              description: 访问令牌过期时间（秒）
              example: 86400
            refresh_expires_in:
              type: integer
              description: 刷新令牌过期时间（秒）
              example: 604800
            user:
              $ref: '#/components/schemas/UserProfile'
        timestamp:
          type: string
          format: date-time
          example: "2025-09-01T12:00:00Z"

    TokenResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            access_token:
              type: string
              description: 新的访问令牌
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            expires_in:
              type: integer
              description: 过期时间（秒）
              example: 86400
        timestamp:
          type: string
          format: date-time
          example: "2025-09-01T12:00:00Z"

tags:
  - name: 健康检查
    description: 服务器健康状态检查接口
  - name: 认证
    description: 用户认证相关接口
  - name: 用户信息
    description: 用户信息管理接口
  - name: 管理员-用户管理
    description: 管理员用户管理接口（需要管理员权限）
  - name: 管理员-角色管理
    description: 管理员角色管理接口（需要管理员权限）
  - name: 管理员-权限管理
    description: 管理员权限管理接口（需要管理员权限）
  - name: 系统统计
    description: 系统统计信息接口（需要管理员权限）

# 错误代码说明
# INVALID_REQUEST (400) - 请求参数错误
# UNAUTHORIZED (401) - 未授权访问
# FORBIDDEN (403) - 权限不足
# NOT_FOUND (404) - 资源不存在
# CONFLICT (409) - 资源冲突
# RATE_LIMITED (429) - 请求频率限制
# INTERNAL_ERROR (500) - 服务器内部错误
# INVALID_CREDENTIALS (401) - 用户名或密码错误
# TOKEN_EXPIRED (401) - 令牌已过期
# TOKEN_INVALID (401) - 令牌无效
# USER_INACTIVE (403) - 用户已被禁用
# PASSWORD_WEAK (400) - 密码强度不足
# EMAIL_EXISTS (409) - 邮箱已存在
# USERNAME_EXISTS (409) - 用户名已存在